{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VBBRTvG2brA0"
      },
      "source": [
        "# Lab 4- Object Oriented Programming\n",
        "\n",
        "For all of the exercises below, make sure you provide tests of your solutions.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oryNzKEtbrA4"
      },
      "source": [
        "1. Write a \"counter\" class that can be incremented up to a specified maximum value, will print an error if an attempt is made to increment beyond that value, and allows reseting the counter."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DXkKYwQ6brA5"
      },
      "outputs": [],
      "source": [
        "class counter:\n",
        "    def __init__(self, max_val):\n",
        "        self.value=0\n",
        "        self.max_val=max_val\n",
        "\n",
        "    def add(self):\n",
        "        if self.value<self.max_val:\n",
        "            self.value=self.value+1\n",
        "            print(\"The current count is: \", self.value)\n",
        "        else:\n",
        "            print(\"\\nInvalid. Cannot increment past the maximum value. Try resetting or add appropriately.\")\n",
        "\n",
        "    def reset(self):\n",
        "        self.value=0\n",
        "        print(\"\\nCannot increment past maximum value. Counter reset. The current count is: \", self.value)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max=10 # i set it to 10 because why not?\n",
        "counter_test=counter(max)\n",
        "\n",
        "for number in range(11): # Since my max value is 10, it will not work for numbers more than 10\n",
        "    if number < max:\n",
        "        counter_test.add()\n",
        "    else:\n",
        "        counter_test.reset()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euBsV8tUGJ-6",
        "outputId": "87cd7905-cc0b-4647-9735-762104b291ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The current count is:  1\n",
            "The current count is:  2\n",
            "The current count is:  3\n",
            "The current count is:  4\n",
            "The current count is:  5\n",
            "The current count is:  6\n",
            "The current count is:  7\n",
            "The current count is:  8\n",
            "The current count is:  9\n",
            "The current count is:  10\n",
            "\n",
            "Cannot increment past maximum value. Counter reset. The current count is:  0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class counter:\n",
        "    def __init__(self, max_val):\n",
        "        self.__value=0\n",
        "        self.__max_val=max_val\n",
        "\n",
        "    def __add(self):\n",
        "        if self.__value<self.__max_val:\n",
        "            self.__value=self.__value+1\n",
        "            print(\"The current count is:\", self.__value)\n",
        "        else:\n",
        "            print(\"Invalid. Cannot increment past the maximum value. Try resetting or adding appropriately.\")\n",
        "\n",
        "    def add(self):\n",
        "        self.__add()\n",
        "\n",
        "    def reset(self):\n",
        "        self.__value=0\n",
        "        print(\"\\nCannot increment past maximum value. Counter reset. The current count is:\", self.__value)\n",
        "\n",
        "    def check_value(self):\n",
        "        return self.__value\n",
        "\n",
        "    def check_max_val(self):\n",
        "        return self.__max_val\n",
        "\n",
        "    def is_at_max(self):\n",
        "        # return self.__value==self.__max_val\n",
        "        if self.__value==self.__max_val:\n",
        "            return \"Yes, it reached the maximum value.\"\n",
        "        else:\n",
        "            return \"No, not yet at maximum value.\""
      ],
      "metadata": {
        "id": "0vS4ODN3Gdb1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "411g_ANXbrA6"
      },
      "source": [
        "2. Copy and paste your solution to question 1 and modify it so that all the data held by the counter is private. Implement functions to check the value of the counter, check the maximum value, and check if the counter is at the maximum."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zImeS8wwbrA6"
      },
      "outputs": [],
      "source": [
        "class counter:\n",
        "    def __init__(self, max_val):\n",
        "        self.__value=0\n",
        "        self.__max_val=max_val\n",
        "\n",
        "    def __add(self):\n",
        "        if self.__value<self.__max_val:\n",
        "            self.__value=self.__value+1\n",
        "            print(\"The current count is:\", self.__value)\n",
        "        else:\n",
        "            print(\"Invalid. Cannot increment past the maximum value. Try resetting or adding appropriately.\")\n",
        "\n",
        "    def add(self):\n",
        "        self.__add()\n",
        "\n",
        "    def reset(self):\n",
        "        self.__value=0\n",
        "        print(\"\\nCannot increment past maximum value. Counter reset. The current count is:\", self.__value)\n",
        "\n",
        "    def check_value(self):\n",
        "        return self.__value\n",
        "\n",
        "    def check_max_val(self):\n",
        "        return self.__max_val\n",
        "\n",
        "    def is_at_max(self):\n",
        "        # return self.__value==self.__max_val\n",
        "        if self.__value==self.__max_val:\n",
        "            return \"Yes, it reached the maximum value.\"\n",
        "        else:\n",
        "            return \"No, not yet at maximum value.\""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max_value=10\n",
        "counter_test=counter(max_value)\n",
        "\n",
        "for number in range(11):\n",
        "    counter_test.add()\n",
        "\n",
        "counter_test.reset()\n",
        "\n",
        "print(\" \")\n",
        "print(\"Current value: \", counter_test.check_value())\n",
        "print(\"What is the maximum value ?\", counter_test.check_max_val())\n",
        "print(\"Is the counter at maximum? \", counter_test.is_at_max())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "96BNDdh3Gusd",
        "outputId": "cdda151e-2f7a-4218-ca78-8628b3141498"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The current count is: 1\n",
            "The current count is: 2\n",
            "The current count is: 3\n",
            "The current count is: 4\n",
            "The current count is: 5\n",
            "The current count is: 6\n",
            "The current count is: 7\n",
            "The current count is: 8\n",
            "The current count is: 9\n",
            "The current count is: 10\n",
            "Invalid. Cannot increment past the maximum value. Try resetting or adding appropriately.\n",
            "\n",
            "Cannot increment past maximum value. Counter reset. The current count is: 0\n",
            " \n",
            "Current value:  0\n",
            "What is the maximum value ? 10\n",
            "Is the counter at maximum?  No, not yet at maximum value.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FhNMPY8vbrA7"
      },
      "source": [
        "3. Implement a class to represent a rectangle, holding the length, width, and $x$ and $y$ coordinates of a corner of the object. Implement functions that compute the area and perimeter of the rectangle. Make all data members private and privide accessors to retrieve values of data members."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Xsd-fRXHbrA7"
      },
      "outputs": [],
      "source": [
        "class rectangle:\n",
        "    def __init__(self, length, width, x, y):\n",
        "        self.__length=length # made it private using the double underscore\n",
        "        self.__width=width\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "\n",
        "    def rect_area(self): # l x w\n",
        "        return self.__length*self.__width\n",
        "\n",
        "    def rect_perimeter(self): # 2l + 2w\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "\n",
        "    def rect_length(self):\n",
        "        return self.__length\n",
        "\n",
        "    def rect_width(self):\n",
        "        return self.__width\n",
        "\n",
        "    def rect_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def rect_y(self):\n",
        "        return self.__y"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_rectangle=rectangle(10,15,20,25)\n",
        "print(f\"Rectangle Area: {my_rectangle.rect_area()}\")\n",
        "print(f\"Rectangle Perimeter: {my_rectangle.rect_perimeter()}\")\n",
        "print(f\"Rectangle Length: {my_rectangle.rect_length()}\")\n",
        "print(f\"Rectangle Width: {my_rectangle.rect_width()}\")\n",
        "print(f\"Rectangle X Coordinate: {my_rectangle.rect_x()}\")\n",
        "print(f\"Rectange Y Coordinate: {my_rectangle.rect_y()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ApUzFQi-dPES",
        "outputId": "76d93302-8931-448f-9be2-802142c5a973"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rectangle Area: 150\n",
            "Rectangle Perimeter: 50\n",
            "Rectangle Length: 10\n",
            "Rectangle Width: 15\n",
            "Rectangle X Coordinate: 20\n",
            "Rectange Y Coordinate: 25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wvYSuiCgbrA7"
      },
      "source": [
        "4. Implement a class to represent a circle, holding the radius and $x$ and $y$ coordinates of center of the object. Implement functions that compute the area and perimeter of the rectangle. Make all data members private and privide accessors to retrieve values of data members."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wx4kn7EVbrA8"
      },
      "outputs": [],
      "source": [
        "class circle:\n",
        "    def __init__(self, radius, x, y):\n",
        "        self.__radius=radius\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "\n",
        "    def circ_radius(self):\n",
        "        return self.__radius\n",
        "\n",
        "    def circ_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def circ_y(self):\n",
        "        return self.__y\n",
        "\n",
        "    def circ_area(self): # area = pi*r^2\n",
        "        pi=3.14159\n",
        "        return pi*(self.__radius)**2\n",
        "\n",
        "    def circumference(self): # circumference = 2*pi*r\n",
        "        pi=3.14159\n",
        "        return 2*pi* self.__radius"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_circle=circle(10,15,20) # radius, x, y\n",
        "print(f\"Circle Radius: {my_circle.circ_radius()}\")\n",
        "print(f\"Circle X Coordinate: {my_circle.circ_x()}\")\n",
        "print(f\"Circle Y Coordinate: {my_circle.circ_y()}\")\n",
        "print(f\"Circle Area: {my_circle.circ_area()}\")\n",
        "print(f\"Circle Circumference: {my_circle.circumference()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwBRxYdxf93g",
        "outputId": "d2f784f3-3780-4d86-e0aa-d80b38fe93dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Circle Radius: 10\n",
            "Circle X Coordinate: 15\n",
            "Circle Y Coordinate: 20\n",
            "Circle Area: 986.95877281\n",
            "Circle Circumference: 62.8318\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NDjwIU6ZbrA8"
      },
      "source": [
        "5. Implement a common base class for the classes implemented in 3 and 4 above which implements all common methods as not implemented functions (virtual). Re-implement your regtangle and circule classes to inherit from the base class and overload the functions accordingly."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AniHXDmkbrA8"
      },
      "outputs": [],
      "source": [
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "class rectangle:\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length # made it private using the double underscore\n",
        "        self.__width=width\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "    def rect_area(self):\n",
        "        return self.__length*self.__width\n",
        "\n",
        "    def rect_perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "\n",
        "    def rect_length(self):\n",
        "        return self.__length\n",
        "\n",
        "    def rect_width(self):\n",
        "        return self.__width\n",
        "\n",
        "    def rect_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def rect_y(self):\n",
        "        return self.__y\n",
        "\n",
        "class circle:\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "\n",
        "    def circ_radius(self):\n",
        "        return self.__radius\n",
        "\n",
        "    def circ_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def circ_y(self):\n",
        "        return self.__y\n",
        "\n",
        "    def circ_area(self): # area = pi*r^2\n",
        "        pi=3.14159\n",
        "        return pi*(self.__radius)**2\n",
        "\n",
        "    def circumference(self): # circumference = 2*pi*r\n",
        "        pi=3.14159\n",
        "        return 2*pi* self.__radius"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_shape = shape(x=10,y=15) # testing out the Not Implemented Error first\n",
        "print(f\"Shape Area: {my_shape.area()}\")\n",
        "print(f\"Shape Perimeter: {my_shape.perimeter()}\")\n",
        "print(f\"Shape X Coordinate: {my_shape.get_x()}\")\n",
        "print(f\"Shape Y Coordinate: {my_shape.get_y()}\") # the get_x and get_y functions aren't working since the error was raised first"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "T5G3D6uH6h5V",
        "outputId": "75b0bc06-59d6-4a3a-c3ef-7174129e9d36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NotImplementedError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-da8289bb939e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmy_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# testing out the Not Implemented Error first\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape Area: {my_shape.area()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape Perimeter: {my_shape.perimeter()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape X Coordinate: {my_shape.get_x()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape Y Coordinate: {my_shape.get_y()}\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# the get_x and get_y functions aren't working since the error was raised first\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-31-9121215459dc>\u001b[0m in \u001b[0;36marea\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0marea\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mperimeter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNotImplementedError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_shape = shape(x=10,y=15) # testing out the Not Implemented Error first\n",
        "print(f\"Shape X Coordinate: {my_shape.get_x()}\") # now showing\n",
        "print(f\"Shape Y Coordinate: {my_shape.get_y()}\")\n",
        "print(f\"Shape Area: {my_shape.area()}\")\n",
        "print(f\"Shape Perimeter: {my_shape.perimeter()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "LX9acnIY8Qj0",
        "outputId": "d6f5b686-db60-454f-c365-bf50329a0a67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape X Coordinate: 10\n",
            "Shape Y Coordinate: 15\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NotImplementedError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-1db64773bee8>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape X Coordinate: {my_shape.get_x()}\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# now showing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape Y Coordinate: {my_shape.get_y()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape Area: {my_shape.area()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape Perimeter: {my_shape.perimeter()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-31-9121215459dc>\u001b[0m in \u001b[0;36marea\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0marea\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mperimeter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNotImplementedError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_rectangle1=rectangle(length=19, width=12, x=4, y=10)\n",
        "my_circle1=circle(radius=10, x=8, y=12)\n",
        "print(f\"Rectangle X Coordinate: {my_rectangle1.rect_x()}\")\n",
        "print(f\"Rectangle Y Coordinate: {my_rectangle1.rect_y()}\")\n",
        "print(f\"Rectangle Area: {my_rectangle1.rect_area()}\")\n",
        "print(f\"Rectangle Perimeter: {my_rectangle1.rect_perimeter()}\")\n",
        "print(\"\\n\")\n",
        "print(f\"Circle X Coordinate: {my_circle1.circ_x()}\")\n",
        "print(f\"Circle Y Coordinate: {my_circle1.circ_y()}\")\n",
        "print(f\"Circle Area: {my_circle1.circ_area()}\")\n",
        "print(f\"Circle Circumference: {my_circle1.circumference()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hvmlqcZz74Su",
        "outputId": "a62a6851-f39d-4687-912d-6bfe75ef24a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rectangle X Coordinate: 4\n",
            "Rectangle Y Coordinate: 10\n",
            "Rectangle Area: 228\n",
            "Rectangle Perimeter: 62\n",
            "\n",
            "\n",
            "Circle X Coordinate: 8\n",
            "Circle Y Coordinate: 12\n",
            "Circle Area: 314.159\n",
            "Circle Circumference: 62.8318\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AkjVr9IJbrA9"
      },
      "source": [
        "6. Implement a triangle class analogous to the rectangle and circle in question 5."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fPmoqfggbrA9"
      },
      "outputs": [],
      "source": [
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "\n",
        "    def base(self):\n",
        "        return self.__base\n",
        "\n",
        "    def height(self):\n",
        "        return self.__height\n",
        "\n",
        "    def tri_area(self): # 1/2 * b * h: triangle area formula\n",
        "        return 0.5*self.__base*self.__height\n",
        "\n",
        "    def tri_perimeter(self):\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_triangle = triangle(base=10, height=15, x=20, y=2)\n",
        "print(f\"Triangle X Coordinate: {my_triangle.get_x()}\")\n",
        "print(f\"Triangle Y Coordinate: {my_triangle.get_y()}\")\n",
        "print(f\"Triangle Base: {my_triangle.base()}\")\n",
        "print(f\"Triangle Height: {my_triangle.height()}\")\n",
        "print(f\"Triangle Area: {my_triangle.tri_area()}\")\n",
        "print(f\"Triangle Perimeter: {my_triangle.tri_perimeter()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QIaLn-E3_kN4",
        "outputId": "71e94183-a359-473a-ffa6-a8b68d1b12be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Triangle X Coordinate: 20\n",
            "Triangle Y Coordinate: 2\n",
            "Triangle Base: 10\n",
            "Triangle Height: 15\n",
            "Triangle Area: 75.0\n",
            "Triangle Perimeter: 43.027756377319946\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nFAjEVlnbrA9"
      },
      "source": [
        "8. Add a function to the object classes, including the base, that tests if a given set of $x$ and $y$ coordinates are inside of the object. You'll have to think through how to determine if a set of coordinates are inside an object for each object type."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UcBGUGX5brA9"
      },
      "outputs": [],
      "source": [
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "\n",
        "class rectangle(shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length\n",
        "        self.__width=width\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "    def area(self):\n",
        "        return self.__length*self.__width\n",
        "    def perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x()+self.get_length()) and self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "\n",
        "class circle(shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "    def area(self):\n",
        "        pi=3.14159\n",
        "        return pi*(self.__radius)**2\n",
        "    def circumference(self):\n",
        "        pi=3.14159\n",
        "        return 2*pi*self.__radius\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        distance=((self.get_x() - x_point_test)**2 + (self.get_y() - y_point_test)**2)**0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "    def area(self):\n",
        "        return 0.5*self.__base*self.__height\n",
        "    def perimeter(self):\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        s=(self.get_y()+self.__height-y_point_test)/self.__height\n",
        "        t=(x_point_test-self.get_x())/self.__base\n",
        "        if 0<=s<=1 and 0<=t<=1 and s+t<= 1:\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape\""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_rectangle2=rectangle(length=5, width=3, x=2, y=4)\n",
        "my_circle2=circle(radius=4, x=90, y=3)\n",
        "my_triangle2=triangle(base=15, height=-4, x=1, y=2)\n",
        "\n",
        "test_point=(5, 5)\n",
        "\n",
        "print(\"Testing if test points are in your rectangle:\\n\")\n",
        "print(f\"{test_point}:\", my_rectangle2.point_inside(*test_point))\n",
        "\n",
        "print(\"\\nTesting if test points are in your circle:\\n\")\n",
        "print(f\"{test_point}:\", my_circle2.point_inside(*test_point))\n",
        "\n",
        "print(\"\\nTesting if test points are in your triangle:\\n\")\n",
        "print(f\"{test_point}:\", my_triangle2.point_inside(*test_point))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h-03h2W3fjVw",
        "outputId": "909da432-9c9b-4b3b-c6f2-027c916d5100"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Testing if test points are in your rectangle:\n",
            "\n",
            "(5, 5): This point is IN your shape.\n",
            "\n",
            "Testing if test points are in your circle:\n",
            "\n",
            "(5, 5): This point is NOT in your shape.\n",
            "\n",
            "Testing if test points are in your triangle:\n",
            "\n",
            "(5, 5): This point is NOT in your shape\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kKoaH29gbrA9"
      },
      "source": [
        "7. Add a function to the object classes, including the base, that returns a list of up to 16 pairs of  $x$ and $y$ points on the parameter of the object."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IhG0H7JVbrA-"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "\n",
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        raise NotImplementedError\n",
        "\n",
        "class rectangle(shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length\n",
        "        self.__width=width\n",
        "\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "\n",
        "    def area(self):\n",
        "        return self.__length*self.__width\n",
        "\n",
        "    def perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x()+self.get_length()) and self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=(self.get_x())+(p*self.get_length())\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "\n",
        "class circle(shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "\n",
        "    def area(self):\n",
        "        pi=3.14159\n",
        "        return pi*(self.__radius)**2\n",
        "\n",
        "    def circumference(self):\n",
        "        pi=3.14159\n",
        "        return 2*pi*self.__radius\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        distance=((self.get_x() - x_point_test)**2 + (self.get_y() - y_point_test)**2)**0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            pi=3.14159\n",
        "            angle=i*(2*pi)/points # why do we need radians??\n",
        "            x=self.get_x() + self.get_radius()*math.cos(angle)\n",
        "            y=self.get_y() + self.get_radius()*math.sin(angle)\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "\n",
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "\n",
        "    def area(self):\n",
        "        return 0.5*self.__base*self.__height\n",
        "\n",
        "    def perimeter(self):\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=self.get_x() + p*self.__base\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_rectangle3=rectangle(length=50, width=40, x=10, y=10)\n",
        "my_circle3=circle(radius=60, x=20, y=30)\n",
        "my_triangle3=triangle(base=90, height=40, x=40, y=10)\n",
        "\n",
        "print(\"Your 16 rectangle parameter points: \\n\")\n",
        "print(my_rectangle3.parameter_points())\n",
        "\n",
        "print(\"\\nYour 16 circle parameter points: \\n\")\n",
        "print(my_circle3.parameter_points())\n",
        "\n",
        "print(\"\\nYour 16 triangle parameter points: \\n\")\n",
        "print(my_triangle3.parameter_points())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LvoYo9fthFSG",
        "outputId": "d6a1d01d-97ce-4c72-f42f-23e89ffd096c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Your 16 rectangle parameter points: \n",
            "\n",
            "[(10.0, 10), (13.333333333333334, 10), (16.666666666666668, 10), (20.0, 10), (23.333333333333336, 10), (26.666666666666664, 10), (30.0, 10), (33.33333333333333, 10), (36.66666666666667, 10), (40.0, 10), (43.33333333333333, 10), (46.666666666666664, 10), (50.0, 10), (53.333333333333336, 10), (56.666666666666664, 10), (60.0, 10)]\n",
            "\n",
            "Your 16 circle parameter points: \n",
            "\n",
            "[(80.0, 30.0), (75.43277956681054, 52.96098755492439), (62.42643501675358, 72.42637872561346), (42.96106110283323, 85.43274910224062), (20.000079607693802, 89.99999999994719), (-2.9609140069751483, 85.43281003128286), (-22.426322434398635, 72.42649130781902), (-35.43271863757314, 52.96113465070163), (-39.999999999788756, 30.0001592153876), (-35.43284049565758, 7.03915954101452), (-22.426547598809748, -12.42626614310916), (-2.9612081985295937, -25.432688172808085), (19.99976117691857, -29.999999999524697), (42.96076691095537, -25.432870959934753), (62.426209851744964, -12.426603889725826), (75.43265770794542, 7.038718253682813)]\n",
            "\n",
            "Your 16 triangle parameter points: \n",
            "\n",
            "[(40.0, 10), (46.0, 10), (52.0, 10), (58.0, 10), (64.0, 10), (70.0, 10), (76.0, 10), (82.0, 10), (88.0, 10), (94.0, 10), (100.0, 10), (106.0, 10), (112.0, 10), (118.0, 10), (124.0, 10), (130.0, 10)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SXfxVNSabrA-"
      },
      "source": [
        "9. Add a function in the base class of the object classes that returns true/false testing that the object overlaps with another object."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6Ckzc-lcbrA-"
      },
      "outputs": [],
      "source": [
        "\n",
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "    def parameter_points(self, points=16):\n",
        "        raise NotImplementedError\n",
        "    def check_overlap(self, shape2):\n",
        "        x1=self.__x\n",
        "        y1=self.__y\n",
        "        x2=shape2.get_x()\n",
        "        y2=shape2.get_y()\n",
        "        if ((x1<x2+shape2.perimeter() and x1+self.perimeter()>=x2 and y1<y2+shape2.perimeter() and y1+self.perimeter()>=y2)):\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "\n",
        "class rectangle(shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length\n",
        "        self.__width=width\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "    def area(self):\n",
        "        return self.__length*self.__width\n",
        "    def perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x()+self.get_length()) and self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"Yes, this point is in your shape.\"\n",
        "        else:\n",
        "            return \"No, this point is not in your shape.\"\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=(self.get_x())+(p*self.get_length())\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "class circle(shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "    def area(self):\n",
        "        pi=3.14159\n",
        "        return pi*(self.__radius)**2\n",
        "    def circumference(self):\n",
        "        pi=3.14159\n",
        "        return 2*pi*self.__radius\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        # If the distance is less than radius then that means the point is inside the circle\n",
        "        distance=((self.get_x() - x_point_test)**2 + (self.get_y() - y_point_test)**2)**0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            pi=3.14159\n",
        "            angle=i*(2*pi)/points # Converts to radians first\n",
        "            x=self.get_x() + self.get_radius()*math.cos(angle)\n",
        "            y=self.get_y() + self.get_radius()*math.sin(angle)\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "    def area(self): # 1/2 * b * h\n",
        "        return 0.5*self.__base*self.__height\n",
        "    def perimeter(self):\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=self.get_x() + p*self.__base\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rectangle_test5=rectangle(length=5, width=3, x=6, y=4)\n",
        "rectangle_test6=rectangle(length=4, width=5, x=3, y=3)\n",
        "triangle_test4=triangle(base=2, height=-3, x=4, y=1)\n",
        "\n",
        "print(\"Does Rectangle 5 overlap with Rectangle 6?\", rectangle_test5.check_overlap(rectangle_test6))\n",
        "print(\"Does Rectangle 5 overlap with Triangle 4?\", rectangle_test5.check_overlap(triangle_test4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "otFPrcKBoxlI",
        "outputId": "e20fa706-da4f-42f0-86c7-afc8a8fc342b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Does Rectangle 5 overlap with Rectangle 6? True\n",
            "Does Rectangle 5 overlap with Triangle 4? False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TpL7amdLbrA-"
      },
      "source": [
        "10. Copy the `Canvas` class from lecture to in a python file creating a `paint` module. Copy your classes from above into the module and implement paint functions. Implement a `CompoundShape` class. Create a simple drawing demonstrating that all of your classes are working."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Canvas:\n",
        "    def __init__(self, width, height):\n",
        "        self.width = width\n",
        "        self.height = height\n",
        "        self.data = [[' '] * width for i in range(height)]\n",
        "\n",
        "    def set_pixel(self, row, col, char='*'):\n",
        "        self.data[row][col] = char\n",
        "\n",
        "    def get_pixel(self, row, col):\n",
        "        return self.data[row][col]\n",
        "\n",
        "    def clear_canvas(self):\n",
        "        self.data = [[' '] * self.width for i in range(self.height)]\n",
        "\n",
        "    def v_line(self, x, y, w, **kargs):\n",
        "        for i in range(x,x+w):\n",
        "            self.set_pixel(i,y, **kargs)\n",
        "\n",
        "    def h_line(self, x, y, h, **kargs):\n",
        "        for i in range(y,y+h):\n",
        "            self.set_pixel(x,i, **kargs)\n",
        "\n",
        "    def line(self, x1, y1, x2, y2, **kargs):\n",
        "        slope = (y2-y1) / (x2-x1)\n",
        "        for y in range(y1,y2):\n",
        "            x= int(slope * y)\n",
        "            self.set_pixel(x,y, **kargs)\n",
        "\n",
        "    def display(self):\n",
        "        print(\"\\n\".join([\"\".join(row) for row in self.data]))\n",
        "\n",
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def check_overlap(self, shape2):\n",
        "        x1=self.__x\n",
        "        y1=self.__y\n",
        "        x2=shape2.get_x()\n",
        "        y2=shape2.get_y()\n",
        "        if ((x1<x2+shape2.perimeter() and x1+self.perimeter()>=x2 and y1<y2+shape2.perimeter() and y1+self.perimeter()>=y2)):\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        canvas.set_pixel(self.get_y(), self.get_x(), char)\n",
        "\n",
        "class rectangle(shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length\n",
        "        self.__width=width\n",
        "\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "\n",
        "    def area(self):\n",
        "        return self.__length*self.__width\n",
        "\n",
        "    def perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x()+self.get_length()) and self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=(self.get_x())+(p*self.get_length())\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=self.get_x()\n",
        "        y=self.get_y()\n",
        "        length=self.__length\n",
        "        width=self.__width\n",
        "        for i in range(x, x+length):\n",
        "            for j in range(y, y+width):\n",
        "                canvas.set_pixel(j, i, char)\n",
        "\n",
        "class circle(shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "\n",
        "    def area(self):\n",
        "        pi=3.14159\n",
        "        return (pi*self.__radius)**2\n",
        "\n",
        "    def circumference(self):\n",
        "        pi=3.14159\n",
        "        return 2*pi*self.__radius\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        distance=((self.get_x() - x_point_test)**2 + (self.get_y() - y_point_test)**2)**0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            pi=3.14159\n",
        "            angle=i*(2*pi)/points # why do we need radians?\n",
        "            x=self.get_x() + self.get_radius()*math.cos(angle)\n",
        "            y=self.get_y() + self.get_radius()*math.sin(angle)\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=self.get_x()\n",
        "        y=self.get_y()\n",
        "        radius=self.__radius\n",
        "        for i in range(x-radius, x+radius+1):\n",
        "            for j in range(y-radius, y+radius+1):\n",
        "                if (x-i)**2 + (y-j)**2 <= radius**2:\n",
        "                    canvas.set_pixel(j, i, char)\n",
        "\n",
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "\n",
        "    def area(self):\n",
        "        return 0.5*self.__base*self.__height\n",
        "\n",
        "    def perimeter(self):\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=self.get_x() + p*self.__base\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=self.get_x()\n",
        "        y=self.get_y()\n",
        "        base=self.__base\n",
        "        height=self.__height\n",
        "        for i in range(x, x+base):\n",
        "            for j in range(y, y+height):\n",
        "                if i<=x+(base-1)-(j-y)/height*base and i>=x+(j-y)/height*base:\n",
        "                    canvas.set_pixel(j, i, char)\n",
        "\n",
        "\n",
        "\n",
        "class CompoundShape(shape):\n",
        "    def __init__(self, x, y):\n",
        "        shape.__init__(self,x, y)\n",
        "        self.subshapes=[]\n",
        "\n",
        "    def add_subshape(self, subshape):\n",
        "        self.subshapes.append(subshape)\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        for subshape in self.subshapes:\n",
        "            subshape.draw(canvas, char)"
      ],
      "metadata": {
        "id": "buW8kQr-pKTe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "canvas_test=Canvas(width=20, height=10)\n",
        "\n",
        "rectangle1=rectangle(length=6, width=3, x=0, y=0)\n",
        "rectangle2=rectangle(length=4, width=3, x=8, y=3)\n",
        "circle1=circle(radius=4, x=15, y=5)\n",
        "triangle1=triangle(base=6, height=4, x=2, y=8)\n",
        "\n",
        "canvas_test.clear_canvas()\n",
        "rectangle1.draw(canvas_test)\n",
        "rectangle2.draw(canvas_test, char=\"~\")\n",
        "circle1.draw(canvas_test, char=\"o\")\n",
        "triangle1.draw(canvas_test, char=\"^\")\n",
        "\n",
        "canvas_test.display()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GOXK2XbqqMEl",
        "outputId": "48b9b24a-239f-4890-a203-8887a47bce68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "******              \n",
            "******         o    \n",
            "******       ooooo  \n",
            "        ~~~~ooooooo \n",
            "        ~~~~ooooooo \n",
            "        ~~~ooooooooo\n",
            "            ooooooo \n",
            "            ooooooo \n",
            "  ^^^^^^     ooooo  \n",
            "    ^^         o    \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y_91dzqlbrA-"
      },
      "source": [
        "11. Create a `RasterDrawing` class. Demonstrate that you can create a drawing made of several shapes, paint the drawing, modify the drawing, and paint it again."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kAQUuFhQbrA-"
      },
      "outputs": [],
      "source": [
        "class RasterDrawing:\n",
        "    def __init__(self, width, height):\n",
        "        self.canvas=Canvas(width, height)\n",
        "        self.shapes=[]\n",
        "\n",
        "    def add_shape(self, shape):\n",
        "        self.shapes.append(shape)\n",
        "\n",
        "    def paint(self):\n",
        "        self.canvas.clear_canvas()\n",
        "        for shape in self.shapes:\n",
        "            shape.draw(self.canvas)\n",
        "        self.canvas.display()\n",
        "\n",
        "    def modify_drawing(self, shape_index, new_shape):\n",
        "        if 0<=shape_index<len(self.shapes):\n",
        "            old_shape = self.shapes[shape_index]\n",
        "            if isinstance(new_shape, shape):\n",
        "                if hasattr(new_shape, \"resize\") and callable(getattr(new_shape, \"resize\")):\n",
        "                    new_shape.resize()\n",
        "                if hasattr(new_shape, \"move\") and callable(getattr(new_shape, \"move\")):\n",
        "                    new_shape.move()\n",
        "                self.shapes[shape_index]=new_shape\n",
        "            else:\n",
        "                print(\"Invalid new shape.\")\n",
        "        else:\n",
        "            print(\"Invalid shape index.\")\n",
        "\n",
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "    def parameter_points(self, points=16):\n",
        "        raise NotImplementedError\n",
        "    def check_overlap(self, shape2):\n",
        "        x1=self.__x\n",
        "        y1=self.__y\n",
        "        x2=shape2.get_x()\n",
        "        y2=shape2.get_y()\n",
        "        if ((x1<x2+shape2.perimeter() and x1+self.perimeter()>=x2 and y1<y2+shape2.perimeter() and y1+self.perimeter()>=y2)):\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        canvas.set_pixel(self.get_y(), self.get_x(), char)\n",
        "\n",
        "    def move(self, new_x=0, new_y=0):\n",
        "        pass\n",
        "    def resize(self, k=1):\n",
        "        pass\n",
        "\n",
        "class rectangle(shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length\n",
        "        self.__width=width\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "    def area(self):\n",
        "        return self.__length*self.__width\n",
        "    def perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x()+self.get_length()) and self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=(self.get_x())+(p*self.get_length())\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=int(self.get_x())\n",
        "        y=int(self.get_y())\n",
        "        length=int(self.__length)\n",
        "        width=int(self.__width)\n",
        "        for i in range(x, x+length):\n",
        "            for j in range(y, y+width):\n",
        "                canvas.set_pixel(j, i, char)\n",
        "    def resize(self, k=2):\n",
        "        self.__length*=k\n",
        "        self.__width*=k\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x=self.get_x()+new_x\n",
        "        self.__y=self.get_y()+new_y\n",
        "\n",
        "class circle(shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "    def area(self):\n",
        "        pi=3.14159\n",
        "        return (pi*self.__radius)**2\n",
        "    def circumference(self):\n",
        "        pi=3.14159\n",
        "        return 2*pi*self.__radius\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        distance=((self.get_x() - x_point_test)**2 + (self.get_y() - y_point_test)**2)**0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"Yes, this point is in your shape.\"\n",
        "        else:\n",
        "            return \"No, this point is not in your shape.\"\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            pi=3.14159\n",
        "            angle=i*(2*pi)/points # Converts to radians first\n",
        "            x=self.get_x() + self.get_radius()*math.cos(angle)\n",
        "            y=self.get_y() + self.get_radius()*math.sin(angle)\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=int(self.get_x())\n",
        "        y=int(self.get_y())\n",
        "        radius=int(self.__radius)\n",
        "        for i in range(max(0, y-radius), min(canvas.height, y+radius+1)):\n",
        "            for j in range(max(0, x-radius), min(canvas.width, x+radius+1)):\n",
        "                if (x-j)** 2 + (y-i)** 2 <= radius**2:\n",
        "                    canvas.set_pixel(i, j, char)\n",
        "    def resize(self, k=2):\n",
        "        self.__radius*=k\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x=self.get_x()+new_x\n",
        "        self.__y=self.get_y()+new_y\n",
        "\n",
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "    def area(self):\n",
        "        return 0.5*self.__base*self.__height\n",
        "    def perimeter(self):\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=self.get_x() + p*self.__base\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=int(self.get_x())\n",
        "        y=int(self.get_y())\n",
        "        base=int(self.__base)\n",
        "        height=int(self.__height)\n",
        "        for i in range(y, y+height):\n",
        "            for j in range(x-(height-i+y), x+(height-i+y)+1):\n",
        "                if x-(height-i+y) <= j <= x+(height-i+y):\n",
        "                    canvas.set_pixel(i, j, char)\n",
        "    def resize(self, k=2):\n",
        "        self.__base*=k\n",
        "        self.__height*=k\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x=self.get_x()+new_x\n",
        "        self.__y=self.get_y()+new_y\n",
        "\n",
        "class CompoundShape(shape):\n",
        "    def __init__(self, x, y):\n",
        "        shape.__init__(self,x, y)\n",
        "        self.subshapes=[]\n",
        "    def add_subshape(self, subshape):\n",
        "        self.subshapes.append(subshape)\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        for subshape in self.subshapes:\n",
        "            subshape.draw(canvas, char)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "drawing_test1=RasterDrawing(width=20, height=10)\n",
        "\n",
        "rectangle1=rectangle(length=4, width=2, x=0, y=0)\n",
        "drawing_test1.add_shape(rectangle1)\n",
        "\n",
        "circle1=circle(radius=3, x=15, y=5)\n",
        "drawing_test1.add_shape(circle1)\n",
        "\n",
        "triangle1=triangle(base=4, height=3, x=5, y=2)\n",
        "drawing_test1.add_shape(triangle1)\n",
        "\n",
        "print(\"Original Drawing:\")\n",
        "drawing_test1.paint()\n",
        "\n",
        "new_rectangle1=rectangle(length=4, width=2, x=0, y=0)\n",
        "new_rectangle1.move(new_x=2, new_y=3)\n",
        "new_rectangle1.resize(k=1)\n",
        "\n",
        "new_circle1= circle(radius=3, x=15, y=5)\n",
        "new_circle1.move(new_x=-3, new_y=-2)\n",
        "new_circle1.resize(k=2)\n",
        "\n",
        "new_triangle1= triangle(base=4, height=3, x=5, y=2)\n",
        "new_triangle1.move(new_x=-2, new_y=1)\n",
        "new_triangle1.resize(k=1.1)\n",
        "\n",
        "drawing_test1.modify_drawing(shape_index=0, new_shape=new_rectangle1)\n",
        "drawing_test1.modify_drawing(shape_index=1, new_shape=new_circle1)\n",
        "drawing_test1.modify_drawing(shape_index=2, new_shape=new_triangle1)\n",
        "\n",
        "print(\"\\nModified Drawing:\")\n",
        "drawing_test1.paint()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1fUfjqRH-DNx",
        "outputId": "9afd5e5d-1e7f-4c61-f61e-ed7c891d49fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Drawing:\n",
            "****                \n",
            "****                \n",
            "  *******      *    \n",
            "   *****     *****  \n",
            "    ***      *****  \n",
            "            ******* \n",
            "             *****  \n",
            "             *****  \n",
            "               *    \n",
            "                    \n",
            "\n",
            "Modified Drawing:\n",
            "********************\n",
            "********************\n",
            "********************\n",
            "********************\n",
            " *******************\n",
            "  ******************\n",
            "   *****************\n",
            "    ****************\n",
            "    ****************\n",
            "    ****************\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wQdQcLGPbrA_"
      },
      "source": [
        "12. Implement the ability to load/save raster drawings and demonstate that your method works. One way to implement this ability:\n",
        "\n",
        "   * Overload `__repr__` functions of all objects to return strings of the python code that would construct the object.\n",
        "   \n",
        "   * In the save method of raster drawing class, store the representations into the file.\n",
        "   * Write a loader function that reads the file and uses `eval` to instantiate the object.\n",
        "\n",
        "For example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2SpRp40cbrA_"
      },
      "outputs": [],
      "source": [
        "class foo:\n",
        "    def __init__(self,a,b=None):\n",
        "        self.a=a\n",
        "        self.b=b\n",
        "\n",
        "    def __repr__(self):\n",
        "        return \"foo(\"+repr(self.a)+\",\"+repr(self.b)+\")\"\n",
        "\n",
        "    def save(self,filename):\n",
        "        f=open(filename,\"w\")\n",
        "        f.write(self.__repr__())\n",
        "        f.close()\n",
        "\n",
        "\n",
        "def foo_loader(filename):\n",
        "    f=open(filename,\"r\")\n",
        "    tmp=eval(f.read())\n",
        "    f.close()\n",
        "    return tmp\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cUvtbT4VbrBA"
      },
      "outputs": [],
      "source": [
        "# Test\n",
        "print(repr(foo(1,\"hello\")))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Kebmv6EBbrBB"
      },
      "outputs": [],
      "source": [
        "# Create an object and save it\n",
        "ff=foo(1,\"hello\")\n",
        "ff.save(\"Test.foo\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wt2n0z7kbrBB"
      },
      "outputs": [],
      "source": [
        "# Check contents of the saved file\n",
        "!cat Test.foo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oNy86TxTbrBB"
      },
      "outputs": [],
      "source": [
        "# Load the object\n",
        "ff_reloaded=foo_loader(\"Test.foo\")\n",
        "ff_reloaded"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "HphQTQHP-Za8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "class RasterDrawing:\n",
        "    def __init__(self, width, height):\n",
        "        self.canvas=Canvas(width, height)\n",
        "        self.shapes=[]\n",
        "    def add_shape(self, shape):\n",
        "        self.shapes.append(shape)\n",
        "    def paint(self):\n",
        "        self.canvas.clear_canvas()\n",
        "        for shape in self.shapes:\n",
        "            shape.draw(self.canvas)\n",
        "        self.canvas.display()\n",
        "    def modify_drawing(self, shape_index, new_shape):\n",
        "        if 0<=shape_index<len(self.shapes):\n",
        "            old_shape = self.shapes[shape_index]\n",
        "            if isinstance(new_shape, shape):\n",
        "                if hasattr(new_shape, \"resize\") and callable(getattr(new_shape, \"resize\")):\n",
        "                    new_shape.resize()\n",
        "                if hasattr(new_shape, \"move\") and callable(getattr(new_shape, \"move\")):\n",
        "                    new_shape.move()\n",
        "                self.shapes[shape_index]=new_shape\n",
        "            else:\n",
        "                print(\"Invalid new shape.\")\n",
        "        else:\n",
        "            print(\"Invalid shape index.\")\n",
        "    def save(self, filename):\n",
        "        with open(filename, \"w\") as file:\n",
        "            for shape in self.shapes:\n",
        "                file.write(repr(shape) + \"\\n\")\n",
        "    def load(self, filename):\n",
        "        self.shapes=[]\n",
        "        with open(filename, \"r\") as file:\n",
        "            for line in file:\n",
        "                shape=eval(line.strip())\n",
        "                self.add_shape(shape)\n",
        "\n",
        "\n",
        "class shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x=x\n",
        "        self.__y=y\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "    def parameter_points(self, points=16):\n",
        "        raise NotImplementedError\n",
        "    def check_overlap(self, shape2):\n",
        "        x1=self.__x\n",
        "        y1=self.__y\n",
        "        x2=shape2.get_x()\n",
        "        y2=shape2.get_y()\n",
        "        if ((x1<x2+shape2.perimeter() and x1+self.perimeter()>=x2 and y1<y2+shape2.perimeter() and y1+self.perimeter()>=y2)):\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        canvas.set_pixel(self.get_y(), self.get_x(), char)\n",
        "    def move(self, new_x=0, new_y=0):\n",
        "        pass\n",
        "    def resize(self, k=1):\n",
        "        pass\n",
        "    def __repr__(self):\n",
        "        return f\"{self.__class__.__name__}({self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "class rectangle(shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__length=length\n",
        "        self.__width=width\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "    def area(self):\n",
        "        return self.__length*self.__width\n",
        "    def perimeter(self):\n",
        "        return (2*self.__length)+(2*self.__width)\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x()+self.get_length()) and self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=(self.get_x())+(p*self.get_length())\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=int(self.get_x())\n",
        "        y=int(self.get_y())\n",
        "        length=int(self.__length)\n",
        "        width=int(self.__width)\n",
        "        for i in range(x, x+length):\n",
        "            for j in range(y, y+width):\n",
        "                canvas.set_pixel(j, i, char)\n",
        "    def resize(self, k=2):\n",
        "        self.__length*=k\n",
        "        self.__width*=k\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x=self.get_x()+new_x\n",
        "        self.__y=self.get_y()+new_y\n",
        "    def __repr__(self):\n",
        "        return f\"Rectangle({self.get_length()}, {self.get_width()}, {self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "class circle(shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__radius=radius\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "    def area(self):\n",
        "        pi=3.14159\n",
        "        return (pi*self.__radius)**2\n",
        "    def circumference(self):\n",
        "        pi=3.14159\n",
        "        return 2*pi*self.__radius\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        distance=((self.get_x() - x_point_test)**2 + (self.get_y() - y_point_test)**2)**0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"Yes, this point is in your shape.\"\n",
        "        else:\n",
        "            return \"No, this point is not in your shape.\"\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            pi=3.14159\n",
        "            angle=i*(2*pi)/points\n",
        "            x=self.get_x() + self.get_radius()*math.cos(angle)\n",
        "            y=self.get_y() + self.get_radius()*math.sin(angle)\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=int(self.get_x())\n",
        "        y=int(self.get_y())\n",
        "        radius=int(self.__radius)\n",
        "        for i in range(max(0, y-radius), min(canvas.height, y+radius+1)):\n",
        "            for j in range(max(0, x-radius), min(canvas.width, x+radius+1)):\n",
        "                if (x-j)** 2 + (y-i)** 2 <= radius**2:\n",
        "                    canvas.set_pixel(i, j, char)\n",
        "    def resize(self, k=2):\n",
        "        self.__radius*=k\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x=self.get_x()+new_x\n",
        "        self.__y=self.get_y()+new_y\n",
        "    def __repr__(self):\n",
        "        return f\"Circle({self.get_radius()}, {self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "class triangle(shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        shape.__init__(self, x, y)\n",
        "        self.__base=base\n",
        "        self.__height=height\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "    def area(self): # 1/2 * b * h\n",
        "        return 0.5*self.__base*self.__height\n",
        "    def perimeter(self): # side1 + side2 + side3 but since only given b and h, use this formula\n",
        "        return self.__base+self.__height+(self.__base**2 + self.__height**2)**0.5\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16=[]\n",
        "        for i in range(points):\n",
        "            p=i/(points-1)\n",
        "            x=self.get_x() + p*self.__base\n",
        "            y=self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x=int(self.get_x())\n",
        "        y=int(self.get_y())\n",
        "        base=int(self.__base)\n",
        "        height=int(self.__height)\n",
        "        for i in range(y, y+height):\n",
        "            for j in range(x-(height-i+y), x+(height-i+y)+1):\n",
        "                if x-(height-i+y) <= j <= x+(height-i+y):\n",
        "                    canvas.set_pixel(i, j, char)\n",
        "    def resize(self, k=2):\n",
        "        self.__base*=k\n",
        "        self.__height*=k\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x=self.get_x()+new_x\n",
        "        self.__y=self.get_y()+new_y\n",
        "    # __repr__ function\n",
        "    def __repr__(self):\n",
        "        return f\"Triangle({self.get_base()}, {self.get_height()}, {self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "class CompoundShape(shape):\n",
        "    def __init__(self, x, y):\n",
        "        shape.__init__(self,x, y)\n",
        "        self.subshapes=[]\n",
        "    def add_subshape(self, subshape):\n",
        "        self.subshapes.append(subshape)\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        for subshape in self.subshapes:\n",
        "            subshape.draw(canvas, char)"
      ],
      "metadata": {
        "id": "tjgXQ3jv_Ig_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "class RasterDrawing:\n",
        "    def __init__(self, width, height):\n",
        "        self.canvas = Canvas(width, height)\n",
        "        self.shapes = []\n",
        "\n",
        "    def add_shape(self, shape):\n",
        "        self.shapes.append(shape)\n",
        "\n",
        "    def paint(self):\n",
        "        self.canvas.clear_canvas()\n",
        "        for shape in self.shapes:\n",
        "            shape.draw(self.canvas)\n",
        "        self.canvas.display()\n",
        "\n",
        "    def modify_drawing(self, shape_index, new_shape):\n",
        "        if 0 <= shape_index < len(self.shapes):\n",
        "            old_shape = self.shapes[shape_index]\n",
        "            if isinstance(new_shape, shape):\n",
        "                if hasattr(new_shape, \"resize\") and callable(getattr(new_shape, \"resize\")):\n",
        "                    new_shape.resize()\n",
        "                if hasattr(new_shape, \"move\") and callable(getattr(new_shape, \"move\")):\n",
        "                    new_shape.move()\n",
        "                self.shapes[shape_index] = new_shape\n",
        "            else:\n",
        "                print(\"Invalid new shape.\")\n",
        "        else:\n",
        "            print(\"Invalid shape index.\")\n",
        "\n",
        "    def save(self, filename):\n",
        "        with open(filename, \"w\") as file:\n",
        "            for shape in self.shapes:\n",
        "                file.write(repr(shape) + \"\\n\")\n",
        "\n",
        "    def load(self, filename):\n",
        "        self.shapes = []\n",
        "        with open(filename, \"r\") as file:\n",
        "            for line in file:\n",
        "                shape = eval(line.strip())\n",
        "                self.add_shape(shape)\n",
        "\n",
        "\n",
        "class Shape:\n",
        "    def __init__(self, x, y):\n",
        "        self.__x = x\n",
        "        self.__y = y\n",
        "\n",
        "    def get_x(self):\n",
        "        return self.__x\n",
        "\n",
        "    def get_y(self):\n",
        "        return self.__y\n",
        "\n",
        "    def area(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def perimeter(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def circumference(self):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def check_overlap(self, shape2):\n",
        "        x1 = self.__x\n",
        "        y1 = self.__y\n",
        "        x2 = shape2.get_x()\n",
        "        y2 = shape2.get_y()\n",
        "\n",
        "        if (x1 < x2 + shape2.perimeter() and x1 + self.perimeter() >= x2 and\n",
        "            y1 < y2 + shape2.perimeter() and y1 + self.perimeter() >= y2):\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        canvas.set_pixel(self.get_y(), self.get_x(), char)\n",
        "\n",
        "    def move(self, new_x=0, new_y=0):\n",
        "        pass\n",
        "\n",
        "    def resize(self, k=1):\n",
        "        pass\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f\"{self.__class__.__name__}({self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, length, width, x, y):\n",
        "        super().__init__(x, y)\n",
        "        self.__length = length\n",
        "        self.__width = width\n",
        "\n",
        "    def get_length(self):\n",
        "        return self.__length\n",
        "\n",
        "    def get_width(self):\n",
        "        return self.__width\n",
        "\n",
        "    def area(self):\n",
        "        return self.__length * self.__width\n",
        "\n",
        "    def perimeter(self):\n",
        "        return (2 * self.__length) + (2 * self.__width)\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        if (self.get_x() <= x_point_test <= (self.get_x() + self.get_length()) and\n",
        "            self.get_y() <= y_point_test <= (self.get_y() + self.get_width())):\n",
        "            return \"This point is IN your shape.\"\n",
        "        else:\n",
        "            return \"This point is NOT in your shape.\"\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16 = []\n",
        "        for i in range(points):\n",
        "            p = i / (points - 1)\n",
        "            x = (self.get_x()) + (p * self.get_length())\n",
        "            y = self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x = int(self.get_x())\n",
        "        y = int(self.get_y())\n",
        "        length = int(self.__length)\n",
        "        width = int(self.__width)\n",
        "        for i in range(x, x + length):\n",
        "            for j in range(y, y + width):\n",
        "                canvas.set_pixel(j, i, char)\n",
        "\n",
        "    def resize(self, k=2):\n",
        "        self.__length *= k\n",
        "        self.__width *= k\n",
        "\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x = self.get_x() + new_x\n",
        "        self.__y = self.get_y() + new_y\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f\"Rectangle({self.get_length()}, {self.get_width()}, {self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "\n",
        "class Circle(Shape):\n",
        "    def __init__(self, radius, x, y):\n",
        "        super().__init__(x, y)\n",
        "        self.__radius = radius\n",
        "\n",
        "    def get_radius(self):\n",
        "        return self.__radius\n",
        "\n",
        "    def area(self):\n",
        "        return 3.14159 * (self.__radius ** 2)\n",
        "\n",
        "    def circumference(self):\n",
        "        return 2 * 3.14159 * self.__radius\n",
        "\n",
        "    def point_inside(self, x_point_test, y_point_test):\n",
        "        distance = ((self.get_x() - x_point_test) ** 2 + (self.get_y() - y_point_test) ** 2) ** 0.5\n",
        "        if distance <= self.__radius:\n",
        "            return \"Yes, this point is in your shape.\"\n",
        "        else:\n",
        "            return \"No, this point is not in your shape.\"\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16 = []\n",
        "        for i in range(points):\n",
        "            angle = i * (2 * math.pi) / points\n",
        "            x = self.get_x() + self.get_radius() * math.cos(angle)\n",
        "            y = self.get_y() + self.get_radius() * math.sin(angle)\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x = int(self.get_x())\n",
        "        y = int(self.get_y())\n",
        "        radius = int(self.__radius)\n",
        "        for i in range(max(0, y - radius), min(canvas.height, y + radius + 1)):\n",
        "            for j in range(max(0, x - radius), min(canvas.width, x + radius + 1)):\n",
        "                if (x - j) ** 2 + (y - i) ** 2 <= radius ** 2:\n",
        "                    canvas.set_pixel(i, j, char)\n",
        "\n",
        "    def resize(self, k=2):\n",
        "        self.__radius *= k\n",
        "\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x = self.get_x() + new_x\n",
        "        self.__y = self.get_y() + new_y\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f\"Circle({self.get_radius()}, {self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "\n",
        "class Triangle(Shape):\n",
        "    def __init__(self, base, height, x, y):\n",
        "        super().__init__(x, y)\n",
        "        self.__base = base\n",
        "        self.__height = height\n",
        "\n",
        "    def get_base(self):\n",
        "        return self.__base\n",
        "\n",
        "    def get_height(self):\n",
        "        return self.__height\n",
        "\n",
        "    def area(self):\n",
        "        return 0.5 * self.__base * self.__height\n",
        "\n",
        "    def perimeter(self):\n",
        "        return self.__base + self.__height + (self.__base ** 2 + self.__height ** 2) ** 0.5\n",
        "\n",
        "    def parameter_points(self, points=16):\n",
        "        points_16 = []\n",
        "        for i in range(points):\n",
        "            p = i / (points - 1)\n",
        "            x = self.get_x() + p * self.__base\n",
        "            y = self.get_y()\n",
        "            points_16.append((x, y))\n",
        "        return points_16\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        x = int(self.get_x())\n",
        "        y = int(self.get_y())\n",
        "        base = int(self.__base)\n",
        "        height = int(self.__height)\n",
        "        for i in range(y, y + height):\n",
        "            for j in range(x - (height - i + y), x + (height - i + y) + 1):\n",
        "                if x - (height - i + y) <= j <= x + (height - i + y):\n",
        "                    canvas.set_pixel(i, j, char)\n",
        "\n",
        "    def resize(self, k=2):\n",
        "        self.__base *= k\n",
        "        self.__height *= k\n",
        "\n",
        "    def move(self, new_x=1, new_y=1):\n",
        "        self.__x = self.get_x() + new_x\n",
        "        self.__y = self.get_y() + new_y\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f\"Triangle({self.get_base()}, {self.get_height()}, {self.get_x()}, {self.get_y()})\"\n",
        "\n",
        "\n",
        "class CompoundShape(Shape):\n",
        "    def __init__(self, x, y):\n",
        "        super().__init__(x, y)\n",
        "        self.subshapes = []\n",
        "\n",
        "    def add_subshape(self, subshape):\n",
        "        self.subshapes.append(subshape)\n",
        "\n",
        "    def draw(self, canvas, char=\"*\"):\n",
        "        for subshape in self.subshapes:\n",
        "            subshape.draw(canvas, char)\n"
      ],
      "metadata": {
        "id": "hythHwKlCCLc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Testing my solution\n",
        "drawing_test2=RasterDrawing(width=20, height=10)\n",
        "\n",
        "rectangle2=rectangle(length=4, width=2, x=0, y=0)\n",
        "circle2=circle(radius=3, x=15, y=5)\n",
        "# triangle2=triangle(base=4, height=3, x=5, y=2)\n",
        "# For some reason it outputs \"Triangle\" is not defined when I try to save it so I just included\n",
        "# the rectangle and circle shape\n",
        "\n",
        "drawing_test2.add_shape(rectangle2)\n",
        "drawing_test2.add_shape(circle2)\n",
        "drawing_test2.add_shape(triangle2)\n",
        "\n",
        "drawing_test2.save(\"drawing.txt\")\n",
        "loaded_in_drawing=RasterDrawing(width=20, height=10)\n",
        "loaded_in_drawing.load(\"drawing.txt\")\n",
        "loaded_in_drawing.paint()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XMgy3hyWAxT9",
        "outputId": "fb0754c9-551f-4874-f55c-a1305ee01227"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "****                \n",
            "****                \n",
            "  *******      *    \n",
            "   *****     *****  \n",
            "    ***      *****  \n",
            "            ******* \n",
            "             *****  \n",
            "             *****  \n",
            "               *    \n",
            "                    \n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}